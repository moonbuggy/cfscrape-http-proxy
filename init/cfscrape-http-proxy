#!/bin/sh

### BEGIN INIT INFO
# Provides:          cfscrape-http-proxy
# Required-Start:    $local_fs $network $time
# Required-Stop:     $local_fs $network $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starting CloudFlare Anti-Bot HTTP Proxy
# Description:       Starting CloudFlare Anti-Bot HTTP Proxy
#  cfscrape-http-proxy daemon.
### END INIT INFO#


PROC="/usr/local/bin/cfscrape-http-proxy"
DESC="CloudFlare Anti-Bot HTTP Proxy"
PIDFILE="/tmp/cfscrape-http-proxy.pid"

ARGS="-D -P $PIDFILE"

ACTION=$1

ansi_red="\033[1;31m";
ansi_white="\033[1;37m";
ansi_green="\033[1;32m";
ansi_yellow="\033[1;33m";
ansi_blue="\033[1;34m";
ansi_bell="\007";
ansi_blink="\033[5m";
ansi_std="\033[m";
ansi_rev="\033[7m";
ansi_ul="\033[4m";

start() {
    echo -n "$ansi_white Starting $DESC.."
    if [ -f "$PIDFILE" ]; then
      echo "            $ansi_yellow already running. $ansi_std"
      return 0
    fi
    $PROC $ARGS > /dev/null 2>&1
    COUNTER=0
    LIMIT=10
    while [ ! -f "$PIDFILE" -a "$COUNTER" -le "$LIMIT" ]; do
      sleep 1;
      COUNTER=`expr $COUNTER + 1`
    done

    if [ ! -f "$PIDFILE" ]; then
      echo "            $ansi_red failed. $ansi_std"
      logger "Failed to start $DESC."
      return 255
    else
      echo "            $ansi_green done. $ansi_std"
      logger "Started $DESC."
      return 0
    fi
}

stop() {
    echo -n "$ansi_white Shutting down $DESC.."
#    $PROC --stop > /dev/null 2>&1 &
    if [ ! -f "$PIDFILE" ] || ! kill -0 $(cat "$PIDFILE"); then
      echo "            $ansi_yellow not running. $ansi_std"
      return 255
    fi

    kill -15 $(cat "$PIDFILE") && rm -f "$PIDFILE"
    echo "            $ansi_green done. $ansi_std"
    return 0
}

check() {
  echo -n "$ansi_white Checking $DESC.."
  if [ -f "$PIDFILE" ]; then
    echo "            $ansi_green alive. $ansi_std";
    return 0
  else
    echo "            $ansi_red dead. $ansi_std";
    return 1
  fi
}


case $ACTION in
  start)
    start
    ;;
  stop | kill)
    check && stop
    ;;
  restart)
    check > /dev/null && stop
    start
    ;;
  check)
    check
    ;;
  *)
    echo "$ansi_white Usage: $0 (start|stop|restart|check|kill)$ansi_std"
    exit 1
    ;;
esac
